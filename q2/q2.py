# Author: P. Khanzadi
# Python: 3.9.7

# Library
import string
import re
from tabulate import tabulate



# Variables: Global

'''
- A dictionary is created to store the number of each alphabet. 
  zero is assigned to each alpahbet as the initial value.
- In this dictionary, keys are the alphabets and values are their
  frequency. 
'''
alphabet_en_freq   = dict.fromkeys(string.ascii_lowercase, 0) # en: english, freq: frequency 

'''
print(alphabet_en_freq)

    {'a': 0 , 'b': 0 , 'c': 0 , ... ,'z': 0}
'''


# Functions

## Read text file 
def read_text_file(input_text_file):
    with open(input_text_file) as f:
        text = f.read()
        return text


## Calculate (cal) alphabet frequency (freq) from a string
def cal_alphabet_freq(text):
    for alphabet in text: 
        if alphabet in alphabet_en_freq.keys():
            alphabet_en_freq[alphabet] += 1
    return alphabet_en_freq




# Main 

## Read text file 
text = read_text_file('D:\\AdvancedProgramming\\ap2024\\q2\\input.txt')

## Change all alphabets to lowercase (LC) (for example: A -> a)
text_LC = text.lower()

# print(text_LC)

## Only keep english alphabets in the text (filter)
text_LC_filter_alphabets = re.sub('[^a-z]+', '', text_LC) #  Read More about it in line 79-130

# print(text_LC_filter_alphabets)

## Calculate frequency of each alphabet 
alphabet_freq = cal_alphabet_freq(text_LC_filter_alphabets)

## Create table for output 
table = [ ['Letter','Frequency'] ]
table.extend( [ list(item) for item in alphabet_freq.items() ] )

## Print table
print(tabulate(table, headers="firstrow", tablefmt="grid"))


### Finish

######################################################################
######################################################################
######################################################################
######################################################################
# Read more about regular expressions

'''
Regular expressions, often shortened to regex or regexp, are a special syntax for defining patterns in text. They are widely used in text processing tasks like:

Matching: Finding specific text formats like emails, phone numbers, dates, etc.
Searching: Locating occurrences of a pattern within a larger text.
Extracting: Grabbing specific parts of the text that match the pattern.
Replacing: Substituting matched patterns with different text.
Validating: Checking if a string conforms to a certain format.
Here are some key concepts in regular expressions:

Characters: Literal characters like 'a', 'b', '1', '$' match themselves exactly.
Character classes: These define a set of characters that can match at a single position. Examples include [a-z] for lowercase letters, [0-9] for digits, \w for word characters.
Metacharacters: These are special characters with specific meanings in regex syntax. Common ones include . (any character except newline), * (zero or more repetitions), + (one or more repetitions), ? (zero or one occurrence).
Grouping: Parentheses ( and ) are used to group parts of the pattern and potentially capture matched text for later use.
Here are some resources to learn more about regular expressions:

Interactive tutorial: https://regex101.com/ (This website allows you to experiment with different regex patterns and see their matches)
Documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions (MDN reference on JavaScript regular expressions)
Cheat sheet: https://regexr.com/3e6m0 (Summary of common regex patterns)

* this text is generated by Google Gemini, 2024.
'''

'''
The regular expression [^a-z]+ matches one or more characters except for lowercase letters (a-z).

Here's a breakdown of the expression:

[^: This is a negation character. It indicates that we want to match characters that are not in the set that follows.
a-z: This is a character class that represents all lowercase letters from 'a' to 'z'.
+: This is a quantifier that specifies that the preceding character class (in this case, anything except lowercase letters) must appear one or more times.
In simpler terms, this regex will match any sequence of characters that contains no lowercase letters. Here are some examples:

Matches:
"123" (all digits)
"@" (symbol)
"!@#$%^&*()" (all special characters)
"Hello, world!" (matches all characters except lowercase letters)
Does not match:
"text" (contains lowercase letters)
"Python" (contains lowercase letters)
"abc!def" (matches only the exclamation mark)
This regular expression is commonly used in tasks like:

Finding non-alphanumeric characters in text
Extracting punctuation marks from a string
Splitting text based on delimiters that are not letters

* this text is generated by Google Gemini, 2024.
'''